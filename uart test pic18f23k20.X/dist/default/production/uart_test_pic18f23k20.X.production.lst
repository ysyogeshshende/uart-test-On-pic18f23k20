

Microchip MPLAB XC8 Assembler V2.32 build 20210201212658 
                                                                                               Sat Dec 25 17:18:36 2021

Microchip MPLAB XC8 C Compiler v2.32 (Free license) build 20210201212658 Og1 
     1                           	processor	18F23K20
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	nvCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	text0,global,reloc=2,class=CODE,delta=1
    10                           	psect	text1,global,reloc=2,class=CODE,delta=1
    11                           	psect	text2,global,reloc=2,class=CODE,delta=1
    12                           	psect	text3,global,reloc=2,class=CODE,delta=1
    13                           	psect	text4,global,reloc=2,class=CODE,delta=1
    14                           	psect	text5,global,reloc=2,class=CODE,delta=1
    15                           	psect	text6,global,reloc=2,class=CODE,delta=1
    16                           	psect	text7,global,reloc=2,class=CODE,delta=1
    17                           	psect	text8,global,reloc=2,class=CODE,delta=1
    18                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    19                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    20                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    21                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    22  0000                     
    23                           ; Version 2.20
    24                           ; Generated 05/05/2020 GMT
    25                           ; 
    26                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    27                           ; All rights reserved.
    28                           ; 
    29                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    30                           ; 
    31                           ; Redistribution and use in source and binary forms, with or without modification, are
    32                           ; permitted provided that the following conditions are met:
    33                           ; 
    34                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    35                           ;        conditions and the following disclaimer.
    36                           ; 
    37                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    38                           ;        of conditions and the following disclaimer in the documentation and/or other
    39                           ;        materials provided with the distribution.
    40                           ; 
    41                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    42                           ;        software without specific prior written permission.
    43                           ; 
    44                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    45                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    46                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    47                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    48                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    49                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    50                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    51                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    52                           ; 
    53                           ; 
    54                           ; Code-generator required, PIC18F23K20 Definitions
    55                           ; 
    56                           ; SFR Addresses
    57  0000                     
    58 ;; Function _EUSART_DefaultFramingErrorHandler is unused but had its address taken
    59  0000                     
    60 ;; Function _EUSART_DefaultOverrunErrorHandler is unused but had its address taken
    61  0000                     
    62 ;; Function _EUSART_DefaultErrorHandler is unused but had its address taken
    63  0000                     
    64                           	psect	nvCOMRAM
    65  000001                     __pnvCOMRAM:
    66                           	callstack 0
    67  000001                     _EUSART_ErrorHandler:
    68                           	callstack 0
    69  000001                     	ds	2
    70  000003                     _EUSART_OverrunErrorHandler:
    71                           	callstack 0
    72  000003                     	ds	2
    73  000005                     _EUSART_FramingErrorHandler:
    74                           	callstack 0
    75  000005                     	ds	2
    76  0000                     _TXREG	set	4013
    77  0000                     _RCREG	set	4014
    78  0000                     _RCSTAbits	set	4011
    79  0000                     _TXSTAbits	set	4012
    80  0000                     _PIR1bits	set	3998
    81  0000                     _SPBRGH	set	4016
    82  0000                     _SPBRG	set	4015
    83  0000                     _TXSTA	set	4012
    84  0000                     _RCSTA	set	4011
    85  0000                     _BAUDCON	set	4024
    86  0000                     _INTCONbits	set	4082
    87  0000                     _INTCON2bits	set	4081
    88  0000                     _WPUB	set	3964
    89  0000                     _ANSELH	set	3967
    90  0000                     _ANSEL	set	3966
    91  0000                     _TRISC	set	3988
    92  0000                     _TRISB	set	3987
    93  0000                     _TRISA	set	3986
    94  0000                     _LATC	set	3979
    95  0000                     _LATB	set	3978
    96  0000                     _LATA	set	3977
    97  0000                     _OSCTUNE	set	3995
    98  0000                     _OSCCON	set	4051
    99                           
   100                           ; #config settings
   101                           
   102                           	psect	cinit
   103  001F48                     __pcinit:
   104                           	callstack 0
   105  001F48                     start_initialization:
   106                           	callstack 0
   107  001F48                     __initialization:
   108                           	callstack 0
   109                           
   110                           ; Clear objects allocated to COMRAM (1 bytes)
   111  001F48  6A0A               	clrf	__pbssCOMRAM& (0+255),c
   112  001F4A                     end_of_initialization:
   113                           	callstack 0
   114  001F4A                     __end_of__initialization:
   115                           	callstack 0
   116  001F4A  0E00               	movlw	low (__Lmediumconst shr (0+16))
   117  001F4C  6EF8               	movwf	tblptru,c
   118  001F4E  0100               	movlb	0
   119  001F50  EFCE  F00F         	goto	_main	;jump to C main() function
   120                           
   121                           	psect	bssCOMRAM
   122  00000A                     __pbssCOMRAM:
   123                           	callstack 0
   124  00000A                     _eusartRxLastError:
   125                           	callstack 0
   126  00000A                     	ds	1
   127                           
   128                           	psect	cstackCOMRAM
   129  000007                     __pcstackCOMRAM:
   130                           	callstack 0
   131  000007                     EUSART_Write@txData:
   132                           	callstack 0
   133  000007                     EUSART_SetFramingErrorHandler@interruptHandler:
   134                           	callstack 0
   135  000007                     EUSART_SetOverrunErrorHandler@interruptHandler:
   136                           	callstack 0
   137  000007                     EUSART_SetErrorHandler@interruptHandler:
   138                           	callstack 0
   139                           
   140                           ; 2 bytes @ 0x0
   141  000007                     	ds	2
   142  000009                     ??_main:
   143                           
   144                           ; 1 bytes @ 0x2
   145  000009                     	ds	1
   146                           
   147 ;;
   148 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   149 ;;
   150 ;; *************** function _main *****************
   151 ;; Defined at:
   152 ;;		line 49 in file "main.c"
   153 ;; Parameters:    Size  Location     Type
   154 ;;		None
   155 ;; Auto vars:     Size  Location     Type
   156 ;;		None
   157 ;; Return value:  Size  Location     Type
   158 ;;                  1    wreg      void 
   159 ;; Registers used:
   160 ;;		wreg, status,2, status,0, cstack
   161 ;; Tracked objects:
   162 ;;		On entry : 0/0
   163 ;;		On exit  : 0/0
   164 ;;		Unchanged: 0/0
   165 ;; Data sizes:     COMRAM   BANK0   BANK1
   166 ;;      Params:         0       0       0
   167 ;;      Locals:         0       0       0
   168 ;;      Temps:          1       0       0
   169 ;;      Totals:         1       0       0
   170 ;;Total ram usage:        1 bytes
   171 ;; Hardware stack levels required when called: 3
   172 ;; This function calls:
   173 ;;		_EUSART_Write
   174 ;;		_SYSTEM_Initialize
   175 ;; This function is called by:
   176 ;;		Startup code after reset
   177 ;; This function uses a non-reentrant model
   178 ;;
   179                           
   180                           	psect	text0
   181  001F9C                     __ptext0:
   182                           	callstack 0
   183  001F9C                     _main:
   184                           	callstack 28
   185  001F9C                     
   186                           ;main.c: 52:     SYSTEM_Initialize();
   187  001F9C  ECAA  F00F         	call	_SYSTEM_Initialize	;wreg free
   188  001FA0                     l918:
   189                           
   190                           ;main.c: 71:     {;main.c: 72:         EUSART_Write(0x34);EUSART_Write('\r');
   191  001FA0  0E34               	movlw	52
   192  001FA2  ECB1  F00F         	call	_EUSART_Write
   193  001FA6  0E0D               	movlw	13
   194  001FA8  ECB1  F00F         	call	_EUSART_Write
   195  001FAC                     
   196                           ;main.c: 73:         _delay((unsigned long)((100)*(4000000/4000.0)));
   197  001FAC  0E82               	movlw	130
   198  001FAE  6E09               	movwf	??_main^0,c
   199  001FB0  0EDE               	movlw	222
   200  001FB2                     u67:
   201  001FB2  2EE8               	decfsz	wreg,f,c
   202  001FB4  D7FE               	bra	u67
   203  001FB6  2E09               	decfsz	??_main^0,f,c
   204  001FB8  D7FC               	bra	u67
   205  001FBA  EFD0  F00F         	goto	l918
   206  001FBE  EF00  F000         	goto	start
   207  001FC2                     __end_of_main:
   208                           	callstack 0
   209                           
   210 ;; *************** function _SYSTEM_Initialize *****************
   211 ;; Defined at:
   212 ;;		line 50 in file "mcc_generated_files/mcc.c"
   213 ;; Parameters:    Size  Location     Type
   214 ;;		None
   215 ;; Auto vars:     Size  Location     Type
   216 ;;		None
   217 ;; Return value:  Size  Location     Type
   218 ;;                  1    wreg      void 
   219 ;; Registers used:
   220 ;;		wreg, status,2, status,0, cstack
   221 ;; Tracked objects:
   222 ;;		On entry : 0/0
   223 ;;		On exit  : 0/0
   224 ;;		Unchanged: 0/0
   225 ;; Data sizes:     COMRAM   BANK0   BANK1
   226 ;;      Params:         0       0       0
   227 ;;      Locals:         0       0       0
   228 ;;      Temps:          0       0       0
   229 ;;      Totals:         0       0       0
   230 ;;Total ram usage:        0 bytes
   231 ;; Hardware stack levels used: 1
   232 ;; Hardware stack levels required when called: 2
   233 ;; This function calls:
   234 ;;		_EUSART_Initialize
   235 ;;		_OSCILLATOR_Initialize
   236 ;;		_PIN_MANAGER_Initialize
   237 ;; This function is called by:
   238 ;;		_main
   239 ;; This function uses a non-reentrant model
   240 ;;
   241                           
   242                           	psect	text1
   243  001F54                     __ptext1:
   244                           	callstack 0
   245  001F54                     _SYSTEM_Initialize:
   246                           	callstack 28
   247  001F54                     
   248                           ;mcc_generated_files/mcc.c: 53:     PIN_MANAGER_Initialize();
   249  001F54  ECBC  F00F         	call	_PIN_MANAGER_Initialize	;wreg free
   250                           
   251                           ;mcc_generated_files/mcc.c: 54:     OSCILLATOR_Initialize();
   252  001F58  EC9F  F00F         	call	_OSCILLATOR_Initialize	;wreg free
   253  001F5C                     
   254                           ;mcc_generated_files/mcc.c: 55:     EUSART_Initialize();
   255  001F5C  ECE1  F00F         	call	_EUSART_Initialize	;wreg free
   256  001F60  0012               	return		;funcret
   257  001F62                     __end_of_SYSTEM_Initialize:
   258                           	callstack 0
   259                           
   260 ;; *************** function _PIN_MANAGER_Initialize *****************
   261 ;; Defined at:
   262 ;;		line 55 in file "mcc_generated_files/pin_manager.c"
   263 ;; Parameters:    Size  Location     Type
   264 ;;		None
   265 ;; Auto vars:     Size  Location     Type
   266 ;;		None
   267 ;; Return value:  Size  Location     Type
   268 ;;                  1    wreg      void 
   269 ;; Registers used:
   270 ;;		wreg, status,2
   271 ;; Tracked objects:
   272 ;;		On entry : 0/0
   273 ;;		On exit  : 0/0
   274 ;;		Unchanged: 0/0
   275 ;; Data sizes:     COMRAM   BANK0   BANK1
   276 ;;      Params:         0       0       0
   277 ;;      Locals:         0       0       0
   278 ;;      Temps:          0       0       0
   279 ;;      Totals:         0       0       0
   280 ;;Total ram usage:        0 bytes
   281 ;; Hardware stack levels used: 1
   282 ;; This function calls:
   283 ;;		Nothing
   284 ;; This function is called by:
   285 ;;		_SYSTEM_Initialize
   286 ;; This function uses a non-reentrant model
   287 ;;
   288                           
   289                           	psect	text2
   290  001F78                     __ptext2:
   291                           	callstack 0
   292  001F78                     _PIN_MANAGER_Initialize:
   293                           	callstack 29
   294  001F78                     
   295                           ;mcc_generated_files/pin_manager.c: 60:     LATA = 0x00;
   296  001F78  0E00               	movlw	0
   297  001F7A  6E89               	movwf	137,c	;volatile
   298                           
   299                           ;mcc_generated_files/pin_manager.c: 61:     LATB = 0x00;
   300  001F7C  0E00               	movlw	0
   301  001F7E  6E8A               	movwf	138,c	;volatile
   302                           
   303                           ;mcc_generated_files/pin_manager.c: 62:     LATC = 0x00;
   304  001F80  0E00               	movlw	0
   305  001F82  6E8B               	movwf	139,c	;volatile
   306  001F84                     
   307                           ;mcc_generated_files/pin_manager.c: 67:     TRISA = 0xFF;
   308  001F84  6892               	setf	146,c	;volatile
   309  001F86                     
   310                           ;mcc_generated_files/pin_manager.c: 68:     TRISB = 0xFF;
   311  001F86  6893               	setf	147,c	;volatile
   312                           
   313                           ;mcc_generated_files/pin_manager.c: 69:     TRISC = 0xBF;
   314  001F88  0EBF               	movlw	191
   315  001F8A  6E94               	movwf	148,c	;volatile
   316                           
   317                           ;mcc_generated_files/pin_manager.c: 74:     ANSEL = 0x1F;
   318  001F8C  0E1F               	movlw	31
   319  001F8E  6E7E               	movwf	126,c	;volatile
   320                           
   321                           ;mcc_generated_files/pin_manager.c: 75:     ANSELH = 0x1F;
   322  001F90  0E1F               	movlw	31
   323  001F92  6E7F               	movwf	127,c	;volatile
   324                           
   325                           ;mcc_generated_files/pin_manager.c: 80:     WPUB = 0x00;
   326  001F94  0E00               	movlw	0
   327  001F96  6E7C               	movwf	124,c	;volatile
   328  001F98                     
   329                           ;mcc_generated_files/pin_manager.c: 81:     INTCON2bits.nRBPU = 1;
   330  001F98  8EF1               	bsf	241,7,c	;volatile
   331  001F9A  0012               	return		;funcret
   332  001F9C                     __end_of_PIN_MANAGER_Initialize:
   333                           	callstack 0
   334                           
   335 ;; *************** function _OSCILLATOR_Initialize *****************
   336 ;; Defined at:
   337 ;;		line 58 in file "mcc_generated_files/mcc.c"
   338 ;; Parameters:    Size  Location     Type
   339 ;;		None
   340 ;; Auto vars:     Size  Location     Type
   341 ;;		None
   342 ;; Return value:  Size  Location     Type
   343 ;;                  1    wreg      void 
   344 ;; Registers used:
   345 ;;		wreg, status,2
   346 ;; Tracked objects:
   347 ;;		On entry : 0/0
   348 ;;		On exit  : 0/0
   349 ;;		Unchanged: 0/0
   350 ;; Data sizes:     COMRAM   BANK0   BANK1
   351 ;;      Params:         0       0       0
   352 ;;      Locals:         0       0       0
   353 ;;      Temps:          0       0       0
   354 ;;      Totals:         0       0       0
   355 ;;Total ram usage:        0 bytes
   356 ;; Hardware stack levels used: 1
   357 ;; This function calls:
   358 ;;		Nothing
   359 ;; This function is called by:
   360 ;;		_SYSTEM_Initialize
   361 ;; This function uses a non-reentrant model
   362 ;;
   363                           
   364                           	psect	text3
   365  001F3E                     __ptext3:
   366                           	callstack 0
   367  001F3E                     _OSCILLATOR_Initialize:
   368                           	callstack 29
   369  001F3E                     
   370                           ;mcc_generated_files/mcc.c: 61:     OSCCON = 0x70;
   371  001F3E  0E70               	movlw	112
   372  001F40  6ED3               	movwf	211,c	;volatile
   373                           
   374                           ;mcc_generated_files/mcc.c: 63:     OSCTUNE = 0x00;
   375  001F42  0E00               	movlw	0
   376  001F44  6E9B               	movwf	155,c	;volatile
   377  001F46  0012               	return		;funcret
   378  001F48                     __end_of_OSCILLATOR_Initialize:
   379                           	callstack 0
   380                           
   381 ;; *************** function _EUSART_Initialize *****************
   382 ;; Defined at:
   383 ;;		line 66 in file "mcc_generated_files/eusart.c"
   384 ;; Parameters:    Size  Location     Type
   385 ;;		None
   386 ;; Auto vars:     Size  Location     Type
   387 ;;		None
   388 ;; Return value:  Size  Location     Type
   389 ;;                  1    wreg      void 
   390 ;; Registers used:
   391 ;;		wreg, status,2, status,0, cstack
   392 ;; Tracked objects:
   393 ;;		On entry : 0/0
   394 ;;		On exit  : 0/0
   395 ;;		Unchanged: 0/0
   396 ;; Data sizes:     COMRAM   BANK0   BANK1
   397 ;;      Params:         0       0       0
   398 ;;      Locals:         0       0       0
   399 ;;      Temps:          0       0       0
   400 ;;      Totals:         0       0       0
   401 ;;Total ram usage:        0 bytes
   402 ;; Hardware stack levels used: 1
   403 ;; Hardware stack levels required when called: 1
   404 ;; This function calls:
   405 ;;		_EUSART_SetErrorHandler
   406 ;;		_EUSART_SetFramingErrorHandler
   407 ;;		_EUSART_SetOverrunErrorHandler
   408 ;; This function is called by:
   409 ;;		_SYSTEM_Initialize
   410 ;; This function uses a non-reentrant model
   411 ;;
   412                           
   413                           	psect	text4
   414  001FC2                     __ptext4:
   415                           	callstack 0
   416  001FC2                     _EUSART_Initialize:
   417                           	callstack 28
   418  001FC2                     
   419                           ;mcc_generated_files/eusart.c: 71:     BAUDCON = 0x08;
   420  001FC2  0E08               	movlw	8
   421  001FC4  6EB8               	movwf	184,c	;volatile
   422                           
   423                           ;mcc_generated_files/eusart.c: 74:     RCSTA = 0x90;
   424  001FC6  0E90               	movlw	144
   425  001FC8  6EAB               	movwf	171,c	;volatile
   426                           
   427                           ;mcc_generated_files/eusart.c: 77:     TXSTA = 0x24;
   428  001FCA  0E24               	movlw	36
   429  001FCC  6EAC               	movwf	172,c	;volatile
   430                           
   431                           ;mcc_generated_files/eusart.c: 80:     SPBRG = 0x67;
   432  001FCE  0E67               	movlw	103
   433  001FD0  6EAF               	movwf	175,c	;volatile
   434                           
   435                           ;mcc_generated_files/eusart.c: 83:     SPBRGH = 0x00;
   436  001FD2  0E00               	movlw	0
   437  001FD4  6EB0               	movwf	176,c	;volatile
   438  001FD6                     
   439                           ;mcc_generated_files/eusart.c: 86:     EUSART_SetFramingErrorHandler(EUSART_DefaultFrami
      +                          ngErrorHandler);
   440  001FD6  0E00               	movlw	0
   441  001FD8  6E07               	movwf	EUSART_SetFramingErrorHandler@interruptHandler^0,c
   442  001FDA  0E00               	movlw	0
   443  001FDC  6E08               	movwf	(EUSART_SetFramingErrorHandler@interruptHandler+1)^0,c
   444  001FDE  EC95  F00F         	call	_EUSART_SetFramingErrorHandler	;wreg free
   445  001FE2                     
   446                           ;mcc_generated_files/eusart.c: 87:     EUSART_SetOverrunErrorHandler(EUSART_DefaultOverr
      +                          unErrorHandler);
   447  001FE2  0E00               	movlw	0
   448  001FE4  6E07               	movwf	EUSART_SetOverrunErrorHandler@interruptHandler^0,c
   449  001FE6  0E00               	movlw	0
   450  001FE8  6E08               	movwf	(EUSART_SetOverrunErrorHandler@interruptHandler+1)^0,c
   451  001FEA  EC9A  F00F         	call	_EUSART_SetOverrunErrorHandler	;wreg free
   452  001FEE                     
   453                           ;mcc_generated_files/eusart.c: 88:     EUSART_SetErrorHandler(EUSART_DefaultErrorHandler
      +                          );
   454  001FEE  0E00               	movlw	0
   455  001FF0  6E07               	movwf	EUSART_SetErrorHandler@interruptHandler^0,c
   456  001FF2  0E00               	movlw	0
   457  001FF4  6E08               	movwf	(EUSART_SetErrorHandler@interruptHandler+1)^0,c
   458  001FF6  EC90  F00F         	call	_EUSART_SetErrorHandler	;wreg free
   459  001FFA                     
   460                           ;mcc_generated_files/eusart.c: 90:     eusartRxLastError.status = 0;
   461  001FFA  0E00               	movlw	0
   462  001FFC  6E0A               	movwf	_eusartRxLastError^0,c	;volatile
   463  001FFE  0012               	return		;funcret
   464  002000                     __end_of_EUSART_Initialize:
   465                           	callstack 0
   466                           
   467 ;; *************** function _EUSART_SetOverrunErrorHandler *****************
   468 ;; Defined at:
   469 ;;		line 161 in file "mcc_generated_files/eusart.c"
   470 ;; Parameters:    Size  Location     Type
   471 ;;  interruptHan    2    0[COMRAM] PTR FTN()void 
   472 ;;		 -> EUSART_DefaultOverrunErrorHandler(1), 
   473 ;; Auto vars:     Size  Location     Type
   474 ;;		None
   475 ;; Return value:  Size  Location     Type
   476 ;;                  1    wreg      void 
   477 ;; Registers used:
   478 ;;		wreg, status,2, status,0
   479 ;; Tracked objects:
   480 ;;		On entry : 0/0
   481 ;;		On exit  : 0/0
   482 ;;		Unchanged: 0/0
   483 ;; Data sizes:     COMRAM   BANK0   BANK1
   484 ;;      Params:         2       0       0
   485 ;;      Locals:         0       0       0
   486 ;;      Temps:          0       0       0
   487 ;;      Totals:         2       0       0
   488 ;;Total ram usage:        2 bytes
   489 ;; Hardware stack levels used: 1
   490 ;; This function calls:
   491 ;;		Nothing
   492 ;; This function is called by:
   493 ;;		_EUSART_Initialize
   494 ;; This function uses a non-reentrant model
   495 ;;
   496                           
   497                           	psect	text5
   498  001F34                     __ptext5:
   499                           	callstack 0
   500  001F34                     _EUSART_SetOverrunErrorHandler:
   501                           	callstack 28
   502  001F34                     
   503                           ;mcc_generated_files/eusart.c: 162:     EUSART_OverrunErrorHandler = interruptHandler;
   504  001F34  C007  F003         	movff	EUSART_SetOverrunErrorHandler@interruptHandler,_EUSART_OverrunErrorHandler
   505  001F38  C008  F004         	movff	EUSART_SetOverrunErrorHandler@interruptHandler+1,_EUSART_OverrunErrorHandler+1
   506  001F3C  0012               	return		;funcret
   507  001F3E                     __end_of_EUSART_SetOverrunErrorHandler:
   508                           	callstack 0
   509                           
   510 ;; *************** function _EUSART_SetFramingErrorHandler *****************
   511 ;; Defined at:
   512 ;;		line 157 in file "mcc_generated_files/eusart.c"
   513 ;; Parameters:    Size  Location     Type
   514 ;;  interruptHan    2    0[COMRAM] PTR FTN()void 
   515 ;;		 -> EUSART_DefaultFramingErrorHandler(1), 
   516 ;; Auto vars:     Size  Location     Type
   517 ;;		None
   518 ;; Return value:  Size  Location     Type
   519 ;;                  1    wreg      void 
   520 ;; Registers used:
   521 ;;		wreg, status,2, status,0
   522 ;; Tracked objects:
   523 ;;		On entry : 0/0
   524 ;;		On exit  : 0/0
   525 ;;		Unchanged: 0/0
   526 ;; Data sizes:     COMRAM   BANK0   BANK1
   527 ;;      Params:         2       0       0
   528 ;;      Locals:         0       0       0
   529 ;;      Temps:          0       0       0
   530 ;;      Totals:         2       0       0
   531 ;;Total ram usage:        2 bytes
   532 ;; Hardware stack levels used: 1
   533 ;; This function calls:
   534 ;;		Nothing
   535 ;; This function is called by:
   536 ;;		_EUSART_Initialize
   537 ;; This function uses a non-reentrant model
   538 ;;
   539                           
   540                           	psect	text6
   541  001F2A                     __ptext6:
   542                           	callstack 0
   543  001F2A                     _EUSART_SetFramingErrorHandler:
   544                           	callstack 28
   545  001F2A                     
   546                           ;mcc_generated_files/eusart.c: 158:     EUSART_FramingErrorHandler = interruptHandler;
   547  001F2A  C007  F005         	movff	EUSART_SetFramingErrorHandler@interruptHandler,_EUSART_FramingErrorHandler
   548  001F2E  C008  F006         	movff	EUSART_SetFramingErrorHandler@interruptHandler+1,_EUSART_FramingErrorHandler+1
   549  001F32  0012               	return		;funcret
   550  001F34                     __end_of_EUSART_SetFramingErrorHandler:
   551                           	callstack 0
   552                           
   553 ;; *************** function _EUSART_SetErrorHandler *****************
   554 ;; Defined at:
   555 ;;		line 165 in file "mcc_generated_files/eusart.c"
   556 ;; Parameters:    Size  Location     Type
   557 ;;  interruptHan    2    0[COMRAM] PTR FTN()void 
   558 ;;		 -> EUSART_DefaultErrorHandler(1), 
   559 ;; Auto vars:     Size  Location     Type
   560 ;;		None
   561 ;; Return value:  Size  Location     Type
   562 ;;                  1    wreg      void 
   563 ;; Registers used:
   564 ;;		wreg, status,2, status,0
   565 ;; Tracked objects:
   566 ;;		On entry : 0/0
   567 ;;		On exit  : 0/0
   568 ;;		Unchanged: 0/0
   569 ;; Data sizes:     COMRAM   BANK0   BANK1
   570 ;;      Params:         2       0       0
   571 ;;      Locals:         0       0       0
   572 ;;      Temps:          0       0       0
   573 ;;      Totals:         2       0       0
   574 ;;Total ram usage:        2 bytes
   575 ;; Hardware stack levels used: 1
   576 ;; This function calls:
   577 ;;		Nothing
   578 ;; This function is called by:
   579 ;;		_EUSART_Initialize
   580 ;; This function uses a non-reentrant model
   581 ;;
   582                           
   583                           	psect	text7
   584  001F20                     __ptext7:
   585                           	callstack 0
   586  001F20                     _EUSART_SetErrorHandler:
   587                           	callstack 28
   588  001F20                     
   589                           ;mcc_generated_files/eusart.c: 166:     EUSART_ErrorHandler = interruptHandler;
   590  001F20  C007  F001         	movff	EUSART_SetErrorHandler@interruptHandler,_EUSART_ErrorHandler
   591  001F24  C008  F002         	movff	EUSART_SetErrorHandler@interruptHandler+1,_EUSART_ErrorHandler+1
   592  001F28  0012               	return		;funcret
   593  001F2A                     __end_of_EUSART_SetErrorHandler:
   594                           	callstack 0
   595                           
   596 ;; *************** function _EUSART_Write *****************
   597 ;; Defined at:
   598 ;;		line 132 in file "mcc_generated_files/eusart.c"
   599 ;; Parameters:    Size  Location     Type
   600 ;;  txData          1    wreg     unsigned char 
   601 ;; Auto vars:     Size  Location     Type
   602 ;;  txData          1    0[COMRAM] unsigned char 
   603 ;; Return value:  Size  Location     Type
   604 ;;                  1    wreg      void 
   605 ;; Registers used:
   606 ;;		wreg
   607 ;; Tracked objects:
   608 ;;		On entry : 0/0
   609 ;;		On exit  : 0/0
   610 ;;		Unchanged: 0/0
   611 ;; Data sizes:     COMRAM   BANK0   BANK1
   612 ;;      Params:         0       0       0
   613 ;;      Locals:         1       0       0
   614 ;;      Temps:          0       0       0
   615 ;;      Totals:         1       0       0
   616 ;;Total ram usage:        1 bytes
   617 ;; Hardware stack levels used: 1
   618 ;; This function calls:
   619 ;;		Nothing
   620 ;; This function is called by:
   621 ;;		_main
   622 ;; This function uses a non-reentrant model
   623 ;;
   624                           
   625                           	psect	text8
   626  001F62                     __ptext8:
   627                           	callstack 0
   628  001F62                     _EUSART_Write:
   629                           	callstack 30
   630                           
   631                           ;incstack = 0
   632                           ;EUSART_Write@txData stored from wreg
   633  001F62  6E07               	movwf	EUSART_Write@txData^0,c
   634  001F64                     l111:
   635                           
   636                           ;mcc_generated_files/eusart.c: 134:     while(0 == PIR1bits.TX1IF)
   637  001F64  A89E               	btfss	158,4,c	;volatile
   638  001F66  EFB7  F00F         	goto	u11
   639  001F6A  EFB9  F00F         	goto	u10
   640  001F6E                     u11:
   641  001F6E  EFB2  F00F         	goto	l111
   642  001F72                     u10:
   643  001F72                     
   644                           ;mcc_generated_files/eusart.c: 138:     TXREG = txData;
   645  001F72  C007  FFAD         	movff	EUSART_Write@txData,4013	;volatile
   646  001F76  0012               	return		;funcret
   647  001F78                     __end_of_EUSART_Write:
   648                           	callstack 0
   649  0000                     
   650                           	psect	rparam
   651  0000                     
   652                           	psect	idloc
   653                           
   654                           ;Config register IDLOC0 @ 0x200000
   655                           ;	unspecified, using default values
   656  200000                     	org	2097152
   657  200000  FF                 	db	255
   658                           
   659                           ;Config register IDLOC1 @ 0x200001
   660                           ;	unspecified, using default values
   661  200001                     	org	2097153
   662  200001  FF                 	db	255
   663                           
   664                           ;Config register IDLOC2 @ 0x200002
   665                           ;	unspecified, using default values
   666  200002                     	org	2097154
   667  200002  FF                 	db	255
   668                           
   669                           ;Config register IDLOC3 @ 0x200003
   670                           ;	unspecified, using default values
   671  200003                     	org	2097155
   672  200003  FF                 	db	255
   673                           
   674                           ;Config register IDLOC4 @ 0x200004
   675                           ;	unspecified, using default values
   676  200004                     	org	2097156
   677  200004  FF                 	db	255
   678                           
   679                           ;Config register IDLOC5 @ 0x200005
   680                           ;	unspecified, using default values
   681  200005                     	org	2097157
   682  200005  FF                 	db	255
   683                           
   684                           ;Config register IDLOC6 @ 0x200006
   685                           ;	unspecified, using default values
   686  200006                     	org	2097158
   687  200006  FF                 	db	255
   688                           
   689                           ;Config register IDLOC7 @ 0x200007
   690                           ;	unspecified, using default values
   691  200007                     	org	2097159
   692  200007  FF                 	db	255
   693                           
   694                           	psect	config
   695                           
   696                           ; Padding undefined space
   697  300000                     	org	3145728
   698  300000  FF                 	db	255
   699                           
   700                           ;Config register CONFIG1H @ 0x300001
   701                           ;	Oscillator Selection bits
   702                           ;	FOSC = XT, XT oscillator
   703                           ;	Fail-Safe Clock Monitor Enable bit
   704                           ;	FCMEN = OFF, Fail-Safe Clock Monitor disabled
   705                           ;	Internal/External Oscillator Switchover bit
   706                           ;	IESO = OFF, Oscillator Switchover mode disabled
   707  300001                     	org	3145729
   708  300001  01                 	db	1
   709                           
   710                           ;Config register CONFIG2L @ 0x300002
   711                           ;	Power-up Timer Enable bit
   712                           ;	PWRT = OFF, PWRT disabled
   713                           ;	Brown-out Reset Enable bits
   714                           ;	BOREN = SBORDIS, Brown-out Reset enabled in hardware only (SBOREN is disabled)
   715                           ;	Brown Out Reset Voltage bits
   716                           ;	BORV = 18, VBOR set to 1.8 V nominal
   717  300002                     	org	3145730
   718  300002  1F                 	db	31
   719                           
   720                           ;Config register CONFIG2H @ 0x300003
   721                           ;	Watchdog Timer Enable bit
   722                           ;	WDTEN = OFF, WDT is controlled by SWDTEN bit of the WDTCON register
   723                           ;	Watchdog Timer Postscale Select bits
   724                           ;	WDTPS = 32768, 1:32768
   725  300003                     	org	3145731
   726  300003  1E                 	db	30
   727                           
   728                           ; Padding undefined space
   729  300004                     	org	3145732
   730  300004  FF                 	db	255
   731                           
   732                           ;Config register CONFIG3H @ 0x300005
   733                           ;	CCP2 MUX bit
   734                           ;	CCP2MX = PORTC, CCP2 input/output is multiplexed with RC1
   735                           ;	PORTB A/D Enable bit
   736                           ;	PBADEN = ON, PORTB<4:0> pins are configured as analog input channels on Reset
   737                           ;	Low-Power Timer1 Oscillator Enable bit
   738                           ;	LPT1OSC = OFF, Timer1 configured for higher power operation
   739                           ;	HFINTOSC Fast Start-up
   740                           ;	HFOFST = ON, HFINTOSC starts clocking the CPU without waiting for the oscillator to st
      +                          ablize.
   741                           ;	MCLR Pin Enable bit
   742                           ;	MCLRE = OFF, RE3 input pin enabled; MCLR disabled
   743  300005                     	org	3145733
   744  300005  0B                 	db	11
   745                           
   746                           ;Config register CONFIG4L @ 0x300006
   747                           ;	Stack Full/Underflow Reset Enable bit
   748                           ;	STVREN = ON, Stack full/underflow will cause Reset
   749                           ;	Single-Supply ICSP Enable bit
   750                           ;	LVP = OFF, Single-Supply ICSP disabled
   751                           ;	Extended Instruction Set Enable bit
   752                           ;	XINST = OFF, Instruction set extension and Indexed Addressing mode disabled (Legacy mo
      +                          de)
   753                           ;	Background Debugger Enable bit
   754                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
   755  300006                     	org	3145734
   756  300006  81                 	db	129
   757                           
   758                           ; Padding undefined space
   759  300007                     	org	3145735
   760  300007  FF                 	db	255
   761                           
   762                           ;Config register CONFIG5L @ 0x300008
   763                           ;	Code Protection Block 0
   764                           ;	CP0 = OFF, Block 0 (000200-000FFFh) not code-protected
   765                           ;	Code Protection Block 1
   766                           ;	CP1 = OFF, Block 1 (001000-001FFFh) not code-protected
   767  300008                     	org	3145736
   768  300008  0F                 	db	15
   769                           
   770                           ;Config register CONFIG5H @ 0x300009
   771                           ;	Boot Block Code Protection bit
   772                           ;	CPB = OFF, Boot block (000000-0001FFh) not code-protected
   773                           ;	Data EEPROM Code Protection bit
   774                           ;	CPD = OFF, Data EEPROM not code-protected
   775  300009                     	org	3145737
   776  300009  C0                 	db	192
   777                           
   778                           ;Config register CONFIG6L @ 0x30000A
   779                           ;	Write Protection Block 0
   780                           ;	WRT0 = OFF, Block 0 (000200-000FFFh) not write-protected
   781                           ;	Write Protection Block 1
   782                           ;	WRT1 = OFF, Block 1 (001000-001FFFh) not write-protected
   783  30000A                     	org	3145738
   784  30000A  0F                 	db	15
   785                           
   786                           ;Config register CONFIG6H @ 0x30000B
   787                           ;	Configuration Register Write Protection bit
   788                           ;	WRTC = OFF, Configuration registers (300000-3000FFh) not write-protected
   789                           ;	Boot Block Write Protection bit
   790                           ;	WRTB = OFF, Boot Block (000000-0001FFh) not write-protected
   791                           ;	Data EEPROM Write Protection bit
   792                           ;	WRTD = OFF, Data EEPROM not write-protected
   793  30000B                     	org	3145739
   794  30000B  E0                 	db	224
   795                           
   796                           ;Config register CONFIG7L @ 0x30000C
   797                           ;	Table Read Protection Block 0
   798                           ;	EBTR0 = OFF, Block 0 (000200-000FFFh) not protected from table reads executed in other
      +                           blocks
   799                           ;	Table Read Protection Block 1
   800                           ;	EBTR1 = OFF, Block 1 (001000-001FFFh) not protected from table reads executed in other
      +                           blocks
   801  30000C                     	org	3145740
   802  30000C  0F                 	db	15
   803                           
   804                           ;Config register CONFIG7H @ 0x30000D
   805                           ;	Boot Block Table Read Protection bit
   806                           ;	EBTRB = OFF, Boot Block (000000-0001FFh) not protected from table reads executed in ot
      +                          her blocks
   807  30000D                     	org	3145741
   808  30000D  40                 	db	64
   809                           tosu	equ	0xFFF
   810                           tosh	equ	0xFFE
   811                           tosl	equ	0xFFD
   812                           stkptr	equ	0xFFC
   813                           pclatu	equ	0xFFB
   814                           pclath	equ	0xFFA
   815                           pcl	equ	0xFF9
   816                           tblptru	equ	0xFF8
   817                           tblptrh	equ	0xFF7
   818                           tblptrl	equ	0xFF6
   819                           tablat	equ	0xFF5
   820                           prodh	equ	0xFF4
   821                           prodl	equ	0xFF3
   822                           indf0	equ	0xFEF
   823                           postinc0	equ	0xFEE
   824                           postdec0	equ	0xFED
   825                           preinc0	equ	0xFEC
   826                           plusw0	equ	0xFEB
   827                           fsr0h	equ	0xFEA
   828                           fsr0l	equ	0xFE9
   829                           wreg	equ	0xFE8
   830                           indf1	equ	0xFE7
   831                           postinc1	equ	0xFE6
   832                           postdec1	equ	0xFE5
   833                           preinc1	equ	0xFE4
   834                           plusw1	equ	0xFE3
   835                           fsr1h	equ	0xFE2
   836                           fsr1l	equ	0xFE1
   837                           bsr	equ	0xFE0
   838                           indf2	equ	0xFDF
   839                           postinc2	equ	0xFDE
   840                           postdec2	equ	0xFDD
   841                           preinc2	equ	0xFDC
   842                           plusw2	equ	0xFDB
   843                           fsr2h	equ	0xFDA
   844                           fsr2l	equ	0xFD9
   845                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         1
    Persistent  6
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           95      3      10
    BANK0           160      0       0
    BANK1           256      0       0

Pointer List with Targets:

    EUSART_SetErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultErrorHandler(), 

    EUSART_ErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultErrorHandler(), 

    EUSART_SetOverrunErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultOverrunErrorHandler(), 

    EUSART_OverrunErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultOverrunErrorHandler(), 

    EUSART_SetFramingErrorHandler@interruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> EUSART_DefaultFramingErrorHandler(), 

    EUSART_FramingErrorHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), EUSART_DefaultFramingErrorHandler(), 


Critical Paths under _main in COMRAM

    _EUSART_Initialize->_EUSART_SetErrorHandler
    _EUSART_Initialize->_EUSART_SetFramingErrorHandler
    _EUSART_Initialize->_EUSART_SetOverrunErrorHandler

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0     309
                                              2 COMRAM     1     1      0
                       _EUSART_Write
                  _SYSTEM_Initialize
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     294
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    0     0      0     294
             _EUSART_SetErrorHandler
      _EUSART_SetFramingErrorHandler
      _EUSART_SetOverrunErrorHandler
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetOverrunErrorHandler                        2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetFramingErrorHandler                        2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _EUSART_SetErrorHandler                               2     0      2      98
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (1) _EUSART_Write                                         1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _EUSART_Write
   _SYSTEM_Initialize
     _EUSART_Initialize
       _EUSART_SetErrorHandler
       _EUSART_SetFramingErrorHandler
       _EUSART_SetOverrunErrorHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1FF      0       0       8        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK1           100      0       0       5        0.0%
BANK1              100      0       0       6        0.0%
BITBANK0            A0      0       0       3        0.0%
BANK0               A0      0       0       4        0.0%
BITCOMRAM           5F      0       0       0        0.0%
COMRAM              5F      3       A       1       10.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       A       7        0.0%
DATA                 0      0       A       9        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.32 build 20210201212658 
Symbol Table                                                                                   Sat Dec 25 17:18:36 2021

                                           l13 1F60                                             l16 1F46  
                                           l41 1F9A                                             l87 1FFE  
                                           u10 1F72                                             u11 1F6E  
                                           u67 1FB2                                            l111 1F64  
                                          l114 1F76                                            l132 1F28  
                                          l126 1F32                                            l129 1F3C  
                                          l900 1F20                                            l910 1FFA  
                                          l902 1FC2                                            l830 1F84  
                                          l904 1FD6                                            l832 1F86  
                                          l912 1F54                                            l920 1FA6  
                                          l906 1FE2                                            l834 1F98  
                                          l914 1F5C                                            l922 1FAC  
                                          l852 1F64                                            l908 1FEE  
                                          l836 1F3E                                            l828 1F78  
                                          l916 1F9C                                            l854 1F72  
                                          l918 1FA0                                            l896 1F2A  
                                          l898 1F34                 ?_EUSART_SetFramingErrorHandler 0007  
                                          wreg 000FE8                                           _LATA 000F89  
                                         _LATB 000F8A                                           _LATC 000F8B  
                                         _WPUB 000F7C                                           _main 1F9C  
                                         start 0000                                   ___param_bank 000000  
                                ?_EUSART_Write 0007                 __size_of_OSCILLATOR_Initialize 000A  
                __end_of_OSCILLATOR_Initialize 1F48                                          ?_main 0007  
                                        _ANSEL 000F7E                                          _RCREG 000FAE  
                                        _RCSTA 000FAB                                          _SPBRG 000FAF  
                                        _TRISA 000F92                                          _TRISB 000F93  
                                        _TRISC 000F94                                          _TXREG 000FAD  
                                        _TXSTA 000FAC                                __initialization 1F48  
                                 __end_of_main 1FC2                                 ??_EUSART_Write 0007  
                                       ??_main 0009                                  __activetblptr 000002  
            _EUSART_DefaultFramingErrorHandler 000000                     _EUSART_OverrunErrorHandler 0003  
                                       _ANSELH 000F7F                                         _OSCCON 000FD3  
                                       _SPBRGH 000FB0                                         isa$std 000001  
                                       tblptru 000FF8                              _SYSTEM_Initialize 1F54  
                                   __accesstop 0060                        __end_of__initialization 1F4A  
                           ?_SYSTEM_Initialize 0007                                  ___rparam_used 000001  
                               __pcstackCOMRAM 0007                            ??_SYSTEM_Initialize 0009  
              ??_EUSART_SetOverrunErrorHandler 0009                      __end_of_SYSTEM_Initialize 1F62  
                         __end_of_EUSART_Write 1F78                                     __pnvCOMRAM 0001  
                                      _BAUDCON 000FB8                                        _OSCTUNE 000F9B  
                     ??_EUSART_SetErrorHandler 0009                                        __Hparam 0000  
                                      __Lparam 0000                                        __pcinit 1F48  
                                      __ramtop 0200                                        __ptext0 1F9C  
                                      __ptext1 1F54                                        __ptext2 1F78  
                                      __ptext3 1F3E                                        __ptext4 1FC2  
                                      __ptext5 1F34                                        __ptext6 1F2A  
                                      __ptext7 1F20                                        __ptext8 1F62  
                        _OSCILLATOR_Initialize 1F3E                       ??_PIN_MANAGER_Initialize 0007  
                   __size_of_SYSTEM_Initialize 000E                           end_of_initialization 1F4A  
        __end_of_EUSART_SetOverrunErrorHandler 1F3E         __size_of_EUSART_SetOverrunErrorHandler 000A  
                _EUSART_SetOverrunErrorHandler 1F34                                  __Lmediumconst 0000  
                            _EUSART_Initialize 1FC2                             ?_EUSART_Initialize 0007  
                                    _RCSTAbits 000FAB                            ??_EUSART_Initialize 0009  
                        __size_of_EUSART_Write 0016                __size_of_EUSART_SetErrorHandler 000A  
                    __end_of_EUSART_Initialize 2000                                      _TXSTAbits 000FAC  
                   _EUSART_DefaultErrorHandler 000000                                   _EUSART_Write 1F62  
                       ?_OSCILLATOR_Initialize 0007                            start_initialization 1F48  
              __size_of_PIN_MANAGER_Initialize 0024                 ?_EUSART_SetOverrunErrorHandler 0007  
                   _EUSART_FramingErrorHandler 0005                         _EUSART_SetErrorHandler 1F20  
                                  __pbssCOMRAM 000A                     __size_of_EUSART_Initialize 003E  
                       _PIN_MANAGER_Initialize 1F78         EUSART_SetErrorHandler@interruptHandler 0007  
                            _eusartRxLastError 000A                                       _PIR1bits 000F9E  
              ??_EUSART_SetFramingErrorHandler 0009              _EUSART_DefaultOverrunErrorHandler 000000  
                                  _INTCON2bits 000FF1                                       __Hrparam 0000  
                                     __Lrparam 0000                        ??_OSCILLATOR_Initialize 0007  
                          _EUSART_ErrorHandler 0001                                  __size_of_main 0026  
                      ?_EUSART_SetErrorHandler 0007  EUSART_SetOverrunErrorHandler@interruptHandler 0007  
                                     isa$xinst 000000          __end_of_EUSART_SetFramingErrorHandler 1F34  
       __size_of_EUSART_SetFramingErrorHandler 000A                  _EUSART_SetFramingErrorHandler 1F2A  
                                   _INTCONbits 000FF2                        ?_PIN_MANAGER_Initialize 0007  
               __end_of_EUSART_SetErrorHandler 1F2A  EUSART_SetFramingErrorHandler@interruptHandler 0007  
                           EUSART_Write@txData 0007                 __end_of_PIN_MANAGER_Initialize 1F9C  
